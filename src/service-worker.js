/* eslint-disable no-restricted-globals */

// Import Workbox modules
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Precache all files generated by your build process
precacheAndRoute(self.__WB_MANIFEST || []); // Ensure __WB_MANIFEST is set correctly during the build process

// Example of a runtime caching route for images
registerRoute(
  ({ request }) => request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'images',
  })
);

// Function to check for a valid service worker
const checkValidServiceWorker = (swUrl) => {
  fetch(swUrl)
    .then((response) => {
      console.log(`Checking Service Worker URL: ${swUrl}`);
      console.log(`Response Status: ${response.status}`);
      console.log(`Content-Type: ${response.headers.get('content-type')}`);

      if (
        response.status === 404 ||
        response.headers.get('content-type')?.indexOf('javascript') === -1
      ) {
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            console.log('Service worker unregistered. Reloading...');
            window.location.reload();
          });
        });
      } else {
        console.log('Valid service worker found.');
      }
    })
    .catch((error) => {
      console.error('Service Worker check failed:', error);
    });
};

// Check for a valid service worker
const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
checkValidServiceWorker(swUrl);
